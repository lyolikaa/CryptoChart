@page "/"
@rendermode InteractiveServer

@using API
@using BlazorBootstrap
@inject IDataService DataService;

<PageTitle>Order book BTC/EUR</PageTitle>

<BuyAmount BidPrice="_snapshot.Bids[0].Price" AskPrice="_snapshot.Asks[0].Price"></BuyAmount>
<Switch @bind-Value="RefreshBook" Label="Refresh Book "/>

<SnapshotTable
    Bids="_snapshot.Bids"
    Asks="_snapshot.Asks"/>
<h2>Snapshot date</h2>

@_snapshot.Date

<div class="container">
  <div class="row">
    <div class="col-lg-6">
      <BarChart @ref="bidChart" Width="200" Height="100" />
    </div>
    <div class="col-lg-6">
      <BarChart @ref="askChart" Width="200" Height="100"  />
    </div>
  </div>
</div>

@code {
    private BarChart bidChart = default!;
    private BarChart askChart = default!;
    private readonly BarChartOptions _barChartOptions = new() { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };

    private Task? _timerTask;
    private CancellationTokenSource _cancellationToken = new();
    private readonly PeriodicTimer _timer = new PeriodicTimer(TimeSpan.FromSeconds(5));

    private bool _refreshBook;
    public bool RefreshBook
    {
        get => _refreshBook;
        set
        {
            _refreshBook = value;
            if (value)
            {
                _cancellationToken = new();
                _timerTask = ConstantRefresh();
            }
            else
                Task.Run(async () => await StopTimerAsync());
        }
    }

    protected override void OnInitialized()
    {
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetSnapshot();
        }
        var chartDataBids = new ChartData { Labels = new List<string> {"Bids"}, Datasets = GetData(_snapshot.Bids) };
        var chartDataAsks = new ChartData { Labels = new List<string> {"Asks"}, Datasets = GetData(_snapshot.Asks) };

        await bidChart.InitializeAsync(chartDataBids, _barChartOptions);
        await askChart.InitializeAsync(chartDataAsks, _barChartOptions);
        await base.OnAfterRenderAsync(firstRender);
    }
    
    ///transpose order lines to chart dataset
    private List<IChartDataset> GetData(OrderLine[] items)
    {
        return items.Select(t => 
            new BarChartDataset
            {
                Label = $"Price {t.Price}", Data = new List<double> { t.Amount }
            })
            .Cast<IChartDataset>().ToList();
    }
    
    
    private Snapshot _snapshot = new() { Asks = new[]{ new OrderLine()}, Bids = new[]{new OrderLine()}};

    private async Task ConstantRefresh()
    {
        try
        {
            while (await _timer.WaitForNextTickAsync(_cancellationToken.Token))
            {
                await GetSnapshot();
            }
        }
        catch (OperationCanceledException e)
        {
        }
    }
    
    private async Task StopTimerAsync() 
    {
        _cancellationToken.Cancel();
        await ConstantRefresh();
        _cancellationToken.Dispose();
    }
    
    private async Task GetSnapshot()
    {
        var apiSnapshot = await DataService.GetSnapshot();
        if (_snapshot.Id == apiSnapshot.Id)
            return;
        ReorderSnapshot(apiSnapshot);
        StateHasChanged();
    }

    ///rearrange bids to sell with lowest first, asks to buy with the highest first
    private void ReorderSnapshot(Snapshot updated)
    {
        _snapshot.Date = updated.Date;
        _snapshot.Id = updated.Id;
        _snapshot.Bids = updated.Bids.OrderBy(b => b.Price).ToArray();
        _snapshot.Asks = updated.Asks.OrderByDescending(b => b.Price).ToArray();
    }

}

