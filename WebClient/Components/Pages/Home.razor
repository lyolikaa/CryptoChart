@page "/"
@rendermode InteractiveServer

@using API
@inject IDataService DataService;

<PageTitle>Order book BTC/EUR</PageTitle>

@* #OA Simplifying - It seems naturally to use top 1st from Bids/Asks  *@
<BuyAmount Bids="_snapshot.Bids" Asks="_snapshot.Asks"></BuyAmount>

<div class="container">
    <div class="row">
        <div class="col-sm-2">
            <Switch @bind-Value="RefreshBook" Label="Continuous Refresh"/>
        </div>
        <div class="col-sm-2">
            Every @Period second
        </div>
        <div class="col-sm-2">
            <button class="btn btn-primary" @onclick="() => GetSnapshot()">Refresh book once</button>
        </div>
        <div class="col-sm-2">
            Depth of Order Book <InputNumber @bind-Value="Limit"></InputNumber>
        </div>
    </div>
</div>

<br>

<h2>Snapshot date</h2>
@_snapshot.Date

<div class="container">
    <div class="row">
        <div class="col-lg-6">
            <BarChart @ref="bidChart" Width="200" Height="100"/>
        </div>
        <div class="col-lg-6">
            <BarChart @ref="askChart" Width="200" Height="100"/>
        </div>
    </div>
</div>

<Switch @bind-Value="ShowTable" Label="Show Table (Bids order from lowest, Asks order from highest)"/>
<div style="display:@(ShowTable ? "block" : "none")">
    <SnapshotTable
        Bids="_snapshot.Bids"
        Asks="_snapshot.Asks"/>
</div>

@code {
    private int Limit = 7;
    private static int Period = 3;
    private bool ShowTable;
    
    private BarChart bidChart = default!;
    private BarChart askChart = default!;
    private readonly BarChartOptions _barChartOptions = new()
    {
        Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Dataset },
    };

    private Task? _timerTask;
    private CancellationTokenSource _cancellationToken = new();
    private readonly PeriodicTimer _timer = new(TimeSpan.FromSeconds(Period));

    private bool _refreshBook;
    public bool RefreshBook
    {
        get => _refreshBook;
        set
        {
            _refreshBook = value;
            if (value)
            {
                _cancellationToken = new();
                _timerTask = ConstantRefresh();
            }
            else
                Task.Run(async () => await StopTimerAsync());
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var chartDataBids = new ChartData { Labels = new List<string> {"Bids prices: lowest ---> highest"}, Datasets = GetData(_snapshot.Bids) };
        var chartDataAsks = new ChartData { Labels = new List<string> {"Asks prices: highest ---> lowest"}, Datasets = GetData(_snapshot.Asks) };

        if (firstRender)
        {
            await GetSnapshot();
            await bidChart.InitializeAsync(chartDataBids, _barChartOptions);
            await askChart.InitializeAsync(chartDataAsks, _barChartOptions);
        }
        else
        {
            await bidChart.UpdateAsync(chartDataBids, _barChartOptions);
            await askChart.UpdateAsync(chartDataAsks, _barChartOptions);
        }
        // await base.OnAfterRenderAsync(firstRender);
    }
    
    ///transpose order lines to chart dataset
    private List<IChartDataset> GetData(OrderLine[] items)
    {
        return items.Select(t => 
            new BarChartDataset
            {
                Label = $"Price {t.Price}", Data = new List<double> { t.Amount }
            })
            .Cast<IChartDataset>().ToList();
    }


    private Snapshot _snapshot = new() { Asks = new[]{ new OrderLine()}, Bids = new[]{new OrderLine()}};

    private async Task ConstantRefresh()
    {
        try
        {
            while (await _timer.WaitForNextTickAsync(_cancellationToken.Token))
            {
                await GetSnapshot();
            }
        }
        catch (OperationCanceledException e)
        {
        }
    }
    
    private async Task StopTimerAsync() 
    {
        _cancellationToken.Cancel();
        await ConstantRefresh();
        _cancellationToken.Dispose();
    }
    
    private async Task GetSnapshot()
    {
        var apiSnapshot = await DataService.GetSnapshot(Limit);
        if (_snapshot.Id == apiSnapshot.Id)
            return;
        ReorderSnapshot(apiSnapshot);
        StateHasChanged();
    }

    //#OA rearrange bids to sell with lowest first, asks to buy with the highest first
    //it seems naturally to use top 1st item to user's purchase
    private void ReorderSnapshot(Snapshot updated)
    {
        _snapshot.Date = updated.Date;
        _snapshot.Id = updated.Id;
        _snapshot.Bids = updated.Bids.OrderBy(b => b.Price).ToArray();
        _snapshot.Asks = updated.Asks.OrderByDescending(b => b.Price).ToArray();
    }

}

