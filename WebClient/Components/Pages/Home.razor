@page "/"
@rendermode InteractiveServer

@using API
@using BlazorBootstrap
@inject IDataService DataService;

<PageTitle>Order book BTC/EUR</PageTitle>

<BuyAmount BidPrice="_snapshot.Bids[0].Price" AskPrice="_snapshot.Asks[0].Price"></BuyAmount>

<h2>Snapshot date</h2>
@_snapshot.Date
<BarChart @ref="bidChart" Width="200" Height="100" Class="mb-4" />

@code {
    private BarChart bidChart = default!;
    private BarChartOptions barChartOptions = default!;
    private ChartData chartData = default!;

    protected override async Task OnInitializedAsync()
    {
        await GetSnapshot();
        chartData = new ChartData { Labels = new List<string> {"Bids", "Asks"}, Datasets = GetDataSets() };
        barChartOptions = new BarChartOptions { Responsive = true, Interaction = new Interaction { Mode = InteractionMode.Index } };
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await bidChart.InitializeAsync(chartData, barChartOptions);
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    
    ///transpose order lines to chart dataset
    private List<IChartDataset> GetDataSets()
    {
        var ds = new List<IChartDataset>();
        for (int i = 0; i < _snapshot.Bids.Length; i++)
        {
            ds.Add(new BarChartDataset
            {
                Label = $"Bid Price {_snapshot.Bids[i].Price}",
                Data = new List<double>{_snapshot.Bids[i].Amount, _snapshot.Asks[i].Amount}
            });
        }

        return ds;
    }
    
    
    private Snapshot _snapshot = new() { Asks = new[]{ new OrderLine()}, Bids = new[]{new OrderLine()}};

    private async Task GetSnapshot()
    {
        _snapshot = await DataService.GetSnapshot();
        ReorderSnapshot();
    }

    ///rearrange bids to sell with lowest first, asks to buy with the highest first
    private void ReorderSnapshot()
    {
        _snapshot.Bids = _snapshot.Bids.OrderBy(b => b.Price).ToArray();
        _snapshot.Asks = _snapshot.Asks.OrderByDescending(b => b.Price).ToArray();
    }

}

